h1. Keybox Database Format

The Keybox database is an instance of
"Keybox::Storage::Container":/rdoc/classes/Keybox/Storage/Container.html
serialized to YAML. The container is responsible for serializing and
deserializing itself.

h2. Initial Creation

When the Container is instantiated for the first time with a
*passphrase* and the location to store the YAML file, 3 pieces of random
data are generated.

* <span>A 256 bit salt is generated and stored as plain text in the YAML file
  as the *key_digest_salt*.</span>
* <span>A 256 bit salt is generated and stored as plain text in the YAML file
  as the *records_digest_salt*.</span>
* <span>A 128 bit salt is generated and stored as plain text in the YAML file
  as the *records_init_vector*.</span>

h2. Encryption Process

# %Generate the encryption key.%
## <span>Take the *key_digest_salt* and combine with the *passphrase* and
   run 2048 cycles of SHA-256 on the data.  This creates a "stretched
   key":http://www.schneier.com/paper-low-entropy.pdf and is the actual
   encryption key.</span>
## <span>Calculate a *key_digest* by applying SHA-256 hash to the actual
   encryption key.  This is stored in plain text the YAML file as *key_digest*</span>
# %Calcuate a *records_digest*.%
## <span>Take the *records_digest_salt* and combine with it the YAML
   serialization of the plain text *records* in the Container.</span>
## <span>Calculate a *records_digest* by applying the SHA-256 to the data
   from the previous step.  This *records_digest* is stored in plain text in
   the YAML file.</span>
# %Encrypt the records using ruby's OpenSSL interface (aes-256-cbc algorithm).%
** %Initialization vector is *records_init_vector* generated earlier%
** <span>The data encrypted is a YAML serialization of the *records* in the
   "Keybox::Storage::Container":/rdoc/classes/Keybox/Storage/Container.html.</span>

h3. The resulting YAML file has the following structure.

<code>
    --- !ruby/object:Keybox::Storage::Container 
    creation_time: <Timestamp the Container was create>
    modification_time: <Timestamp of the last container modification>
    last_access_time: <Timestamp of the last container access>
    data_members: 
      :key_digest_algorithm: sha256
      :records_digest_salt: <256 bits of data>
      :key_digest: <sha-256 hash>
      :records_digest_algorithm: sha256
      :version: 
      - 1
      - 0
      - 0
      :records_digest: <sha-246 hash>
      :records_init_vector: <128 bits of data>
      :key_calc_iterations: 2048
      :records_cipher_algorithm: aes-256-cbc
      :key_digest_salt: <256 bits of dat>
      :records_encrypted_data: <Encrypted Ddata>
    uuid: !ruby/object:Keybox::UUID 
      bytes: <serialized uuid>
</code>

h2. Decryption Process

# <span>Deserialize the YAML file into a
  "Keybox::Storage::Container":/rdoc/classes/Keybox/Storage/Container.html</span>
# <span>Calculate the actual encryption key in the same manner as step 2
  in the encryption process.  The *key_digest_salt* is taken from the
  YAML file.</span>
# <span>Confirm that the passphrase given will decrypt this file by
  calculating the *key_digest* of the encryption key and validating that
  this calculated value matches the *key_digest* stored in the YAML
  file.</span>
# <span>Decrypt the *records_encrypted_data* field using the
  *records_init_vector* from the YAML file, the actual key calculated
  above and the OpenSSL libraries.</span>
# <span>Validate that the data decrypted is accurate by calculating a SHA-256
  hash of the *records_digest_salt* and the decrypted data.  Compare
  this with the *records_digest* from the YAML file to ensure that all
  the data was decrypted successfully.</span>
